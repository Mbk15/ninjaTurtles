{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","container/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardcomp","map","user","i","console","log","add","subtract","areaOfCircle","volumeOfCylinder","volumeOfCone","Scroll","props","style","overflowY","border","height","children","SearchBox","searchField","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchange","event","target","value","fetch","then","response","json","users","filteredRobot","filter","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAeeA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAgB,EAATC,GAC3B,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,gBAAgBC,IAAI,qCAC7B,gCACE,6BAAKL,IACL,4BAAIC,W,OCoBGK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZC,EAAWD,EAAOE,KAAI,SAACC,EAAMC,GACjC,OACE,cAAC,EAAD,CAEET,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,OAHZU,MAaX,OANAC,QAAQC,IAAR,6CAAkDC,cAAI,EAAG,KACzDF,QAAQC,IAAR,gDAAqDE,mBAAS,EAAG,KACjEH,QAAQC,IAAR,0CAA+CG,uBAAa,KAC5DJ,QAAQC,IAAR,+CAAoDI,2BAAiB,EAAG,KACxEL,QAAQC,IAAR,2CAAgDK,uBAAa,EAAG,MAEzD,qBAAKf,UAAU,eAAf,SAA+BK,KCXzBW,EAdA,SAACC,GACd,OACE,qBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,SAJZ,SAOGJ,EAAMK,YCIEC,EAZG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,8BACE,uBACEC,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCaHI,E,kDAnBb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IAEDa,MAAQ,CACXC,UAAU,GAJK,E,qDAOnB,SAAkBC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAE5B,WACE,OAAIG,KAAKJ,MAAMC,SACN,yDAEAG,KAAKjB,MAAMK,a,GAfIc,aC8CbC,G,wDAxCb,aAAe,IAAD,8BACZ,gBAMFC,aAAe,SAACC,GACd,EAAKJ,SAAS,CAAEX,YAAae,EAAMC,OAAOC,SAN1C,EAAKX,MAAQ,CACX1B,OAAQ,GACRoB,YAAa,IAJH,E,qDAWd,WAAqB,IAAD,OAClBkB,MAAM,8CACHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,EAAKX,SAAS,CAAE/B,OAAQ0C,S,oBAG9B,WAAU,IAAD,EACyBZ,KAAKJ,MAA7B1B,EADD,EACCA,OAAQoB,EADT,EACSA,YACVuB,EAAgB3C,EAAO4C,QAAO,SAAC5C,GACnC,OAAOA,EAAOP,KAAKoD,cAAcC,SAAS1B,EAAYyB,kBAExD,OAAO,OAAC7C,QAAD,IAACA,OAAD,EAACA,EAAQ+C,QAGd,gCACE,oBAAInD,UAAU,OAAd,2BACA,cAAC,EAAD,CAAWyB,aAAcS,KAAKI,eAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAUlC,OAAQ2C,WAPxB,oBAAI/C,UAAU,OAAd,yB,GA3BYoC,cCKHgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.4be6e0e1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\nimport \"../index.css\";\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"NinjaContainer\">\r\n      <img alt=\"Ninja Turtles\" src=\"https://robohash.org/op?set=set2\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"./card.css\";\r\nimport {\r\n  add,\r\n  subtract,\r\n  areaOfCircle,\r\n  volumeOfCylinder,\r\n  volumeOfCone,\r\n} from \"math\";\r\nconst CardList = ({ robots }) => {\r\n  const cardcomp = robots.map((user, i) => {\r\n    return (\r\n      <Card\r\n        key={i}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}\r\n      />\r\n    );\r\n  });\r\n  console.log(`The Addition of the two numbers is ${add(2, 5)}`);\r\n  console.log(`The subtarction of the two numbers is ${subtract(2, 5)}`);\r\n  console.log(`The Area of the given Circle is ${areaOfCircle(9)}`);\r\n  console.log(` The Volume of the given Cylinder is ${volumeOfCylinder(9, 5)}`);\r\n  console.log(` The Volume of the given Cone is ${volumeOfCone(7, 11)}`);\r\n\r\n  return <div className=\"NinjaContain\">{cardcomp}</div>;\r\n};\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"5px solid black\",\r\n        height: \"800px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"search\"\r\n        placeholder=\"Search Avatar\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Still Working On Update</h1>;\r\n    } else {\r\n      return this.props.children;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport \"../index.css\";\r\nimport \"./App.css\";\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchField: \"\",\r\n    };\r\n  }\r\n  onSearchange = (event) => {\r\n    this.setState({ searchField: event.target.value });\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((users) => {\r\n        this.setState({ robots: users });\r\n      });\r\n  }\r\n  render() {\r\n    const { robots, searchField } = this.state;\r\n    const filteredRobot = robots.filter((robots) => {\r\n      return robots.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return !robots?.length ? (\r\n      <h1 className=\"sega\">Loading</h1>\r\n    ) : (\r\n      <div>\r\n        <h1 className=\"sega\">Ninja Turtles</h1>\r\n        <SearchBox searchChange={this.onSearchange} />\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filteredRobot} />\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./container/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}